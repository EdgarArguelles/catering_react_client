import webpack from 'webpack';
import path from 'path';
import { CleanWebpackPlugin } from 'clean-webpack-plugin';
import Analyzer from 'webpack-bundle-analyzer';
import MiniCSSExtractPlugin from 'mini-css-extract-plugin';
import OptimizeCSSAssetsPlugin from 'optimize-css-assets-webpack-plugin';
import CopyPlugin from 'copy-webpack-plugin';
import WorkboxPlugin from 'workbox-webpack-plugin';

const srcPath = path.resolve('./src');
const distPath = path.resolve('./dist');
const nodeDir = path.resolve('./node_modules');

export default {
  entry: {
    polyfill: 'babel-polyfill',
    app: './src/app/App.jsx',
  },
  output: {
    path: distPath,
    filename: '[name].js',
    publicPath: '/',
  },
  devServer: {
    port: 3001,
    host: '0.0.0.0',
    historyApiFallback: true,
  },
  performance: {
    hints: false, // use 'warning' to webpack notifies you of assets and entry points that exceed a specific file limit
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        styles: { test: /\.s?css$/, name: 'styles', chunks: 'all' },
        react: { test: /[\\/]node_modules[\\/]react-dom[\\/]/, name: 'react', chunks: 'initial' },
      },
    },
  },
  plugins: [
    new CleanWebpackPlugin(),
    new Analyzer.BundleAnalyzerPlugin({
      analyzerMode: 'static', reportFilename: '../statistics/tree.html', openAnalyzer: false,
    }), // generate tree.html
    new MiniCSSExtractPlugin(), // create a separated file for css
    new OptimizeCSSAssetsPlugin(), // remove duplicated css classes generated by sass-loader
    new webpack.DefinePlugin({
      'process.env': {
        API_URL: JSON.stringify(process.env.API_URL),
      },
    }),
    new CopyPlugin({ patterns: [{ from: './src/manifest.json', to: distPath }] }),
    new WorkboxPlugin.GenerateSW({
      clientsClaim: true,
      skipWaiting: true,
      navigateFallback: '/index.html',
      runtimeCaching: [
        {
          urlPattern: /^https:\/\/drive\.google\.com\/uc.*/, // cache all drive images responses
          handler: 'StaleWhileRevalidate',
        },
      ],
    }),
  ],
  resolve: {
    extensions: ['*', '.js', '.jsx'],
    alias: {
      app: `${srcPath}/app`, // allow to use import with absolute path (example 'app/')
      assets: `${srcPath}/assets`, // allow to use import with 'assets/'
      stompjs: `${nodeDir}/stompjs/lib/stomp.js`, // allow to use import Stomp from 'stompjs';
    },
  },
  module: {
    rules: [
      // babel
      { test: /\.(js|jsx)?$/, exclude: [/node_modules/], use: 'babel-loader' },
      // index
      { test: /index.html$/, type: 'asset/resource', generator: { filename: '[name][ext]' } },
      // fonts
      { test: /\.(eot|woff|woff2|ttf)$/, type: 'asset/resource', generator: { filename: 'fonts/[name][ext]' } },
      // assets
      { test: /\.(png|jpg|gif)$/, type: 'asset/resource', generator: { filename: 'assets/[name][ext]' } },
      // svg
      { test: /\.svg$/, use: '@svgr/webpack' },
      // sass
      {
        test: /\.(scss|css)$/, use: [
          MiniCSSExtractPlugin.loader,
          'css-loader',
          // add vendor prefix (user-select: none -> -webkit-user-select: none)
          { loader: 'postcss-loader', options: { postcssOptions: { plugins: [require('autoprefixer')()] } } },
          'sass-loader',
        ],
      },
    ],
  },
};